# .github/workflows/backend_ci.yml
name: Stage 1 - PVX Backend CI & Push to ACR

on:
  push:
    branches: [ testing ]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  test_backends:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements*.txt; do pip install -r "$req"; done
          pip install pytest httpx

      - name: Prepare test DBs
        env:
          PGPASSWORD: postgres
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          until psql -h localhost -U postgres -tc "SELECT 1" >/dev/null 2>&1; do sleep 1; done
          for db in products orders customers; do
            psql -h localhost -U postgres -tc "SELECT 1 FROM pg_database WHERE datname='${db}'" | grep -q 1 || \
              psql -h localhost -U postgres -c "CREATE DATABASE ${db};"
          done

      - name: Patch order_service test import (robust)
        run: |
          sed -i 's/from app.main import PRODUCT_SERVICE_URL, app/from app.main import app\nimport os\nPRODUCT_SERVICE_URL = os.getenv("PRODUCT_SERVICE_URL", "http:\/\/localhost:8000")/' backend/order_service/tests/test_main.py

      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

      - name: Test customer_service
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

  build_and_push:
    runs-on: ubuntu-latest
    needs: test_backends
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u "${{ secrets.ACR_USERNAME }}" --password-stdin

      - name: Build & push Product image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/product_service:pvx-latest ./backend/product_service
          docker tag  ${{ secrets.ACR_LOGIN_SERVER }}/product_service:pvx-latest ${{ secrets.ACR_LOGIN_SERVER }}/product_service:pvx-${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product_service:pvx-latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product_service:pvx-${{ github.sha }}

      - name: Build & push Order image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/order_service:pvx-latest ./backend/order_service
          docker tag  ${{ secrets.ACR_LOGIN_SERVER }}/order_service:pvx-latest ${{ secrets.ACR_LOGIN_SERVER }}/order_service:pvx-${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order_service:pvx-latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order_service:pvx-${{ github.sha }}

      - name: Build & push Customer image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:pvx-latest ./backend/customer_service
          docker tag  ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:pvx-latest ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:pvx-${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:pvx-latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:pvx-${{ github.sha }}
